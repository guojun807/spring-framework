<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<bean id="myTestBean" class="store.guojun.beans.MyTestBean">
		<meta key="hello" value="world"/>
	</bean>
	<bean id="getUserBeanTest" class="store.guojun.beans.lookup.GetUserBeanTest">
		<!-- 每一个lookup创建一个实例LookupOverride，该实例重写了hashcode,相同的name只会储存最后一个，所以下面
		的lookup最后调用的是teacher
		存放在Set<MethodOverride>集合中，该集合是GenericBeanDefinition的一个属性 -->
		<lookup-method name="getBean" bean="student"></lookup-method>
		<lookup-method name="getBean" bean="teacher"></lookup-method>
		<!--
		  每一个meta 创建一个实例 BeanMetadataAttribute(key为name,value=value)，
		  把每个实例放入 GenericBeanDefinition 的 Map(String, Object) attributes 属性中
		-->
		<meta key="aaa" value="bbb"/>
		<meta key="hello" value="world"/>
	</bean>
	<bean id="teacher" class="store.guojun.beans.lookup.Teacher"></bean>
	<bean id="student" class="store.guojun.beans.lookup.Student"></bean>

	<bean id="helloBean" class="store.guojun.beans.constructor.HelloBean">
		<constructor-arg index="1">
			<value>北京</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>zhangsan</value>
		</constructor-arg>
		<constructor-arg index="0">
			<value>张三</value>
		</constructor-arg>
	</bean>
	<!-- 通过构造器注入 -->
	<!--<bean id="testA" class="store.guojun.beans.depends.TestA">-->
		<!--<constructor-arg index="0" ref="testB"></constructor-arg>-->
	<!--</bean>-->
	<!--<bean id="testB" class="store.guojun.beans.depends.TestB">-->
		<!--<constructor-arg index="0" ref="testC"></constructor-arg>-->
	<!--</bean>-->
	<!--<bean id="testC" class="store.guojun.beans.depends.TestC">-->
		<!--<constructor-arg index="0" ref="testA"></constructor-arg>-->
	<!--</bean>-->
	<!-- 通过set注入 -->
	<!--<bean id="testA" class="store.guojun.beans.depends.TestA">-->
		<!--<constructor-arg index="0" ref="testB"></constructor-arg>-->
	<!--</bean>-->
	<!--<bean id="testB" class="store.guojun.beans.depends.TestB">-->
		<!--<constructor-arg index="0" ref="testC"></constructor-arg>-->
	<!--</bean>-->
	<!--<bean id="testC" class="store.guojun.beans.depends.TestC">-->
		<!--<constructor-arg index="0" ref="testA"></constructor-arg>-->
	<!--</bean>-->
	<!-- 通过prototype注入 -->
	<bean id="testA" class="store.guojun.beans.depends.TestA">
		<property name="testB" ref="testB"></property>
	</bean>
	<bean id="testB" class="store.guojun.beans.depends.TestB">
		<property name="testC" ref="testC"></property>
	</bean>
	<bean id="testC" class="store.guojun.beans.depends.TestC">
		<property name="testA" ref="testA"></property>
	</bean>

	<!-- aop增强 -->
	<bean id="greetAdvice" class="store.guojun.aop.GreetingBeforeAdvice"></bean>
	<bean id="target" class="store.guojun.aop.NaiveWaiter"></bean>
	<bean id="waiteradvice" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:proxyInterfaces="store.guojun.aop.Waiter"
		p:interceptorNames="greetAdvice"
		p:target-ref="target"
	/>
	<!-- 依次为:指定代理的接口,如果是多个接口,使用<list> 元素,即代理需要实现的接口
	 	指定使用的增强
	 	指定对哪个bean 进行代理  (精通spring4.0)234页
	 -->
	<bean id="greetAfterAdvice" class="store.guojun.aop.GreetingAterAdvice"></bean>

	<bean id="afterwaiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		  p:proxyInterfaces="store.guojun.aop.Waiter"
		  p:interceptorNames="greetAfterAdvice,greetAdvice"
		  p:target-ref="target"
	/>
	<!-- 依次为:指定代理的接口,如果是多个接口,使用<list> 元素,即代理需要实现的接口
	 	指定使用的增强
	 	指定对哪个bean 进行代理  (精通spring4.0)234页
	 -->
	<bean id="greetAroundAdvice" class="store.guojun.aop.GreetingAroundAdvice"></bean>
	<bean id="aroundwaiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		  p:proxyInterfaces="store.guojun.aop.Waiter"
		  p:interceptorNames="greetAroundAdvice"
		  p:target-ref="target"
	/>

	<!-- 依次为:指定代理的接口,如果是多个接口,使用<list> 元素,即代理需要实现的接口
	 	指定使用的增强
	 	指定对哪个bean 进行代理  (精通spring4.0)234页
	 -->
	<bean id="naiveErrorWaiter" class="store.guojun.aop.NaiveErrorWaiter"></bean>
	<bean id="greetThrowAdvice" class="store.guojun.aop.GreetingThrowAdvice"></bean>
	<bean id="throwwaiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		  p:interceptorNames="greetThrowAdvice"
		  p:target-ref="naiveErrorWaiter"
		  p:proxyTargetClass="true"
	/>
<!--引介增强 必须强制使用cglib-->
	<bean id="pmonitor" class="store.guojun.aop.ControllablePerformanceMonitor"></bean>
	<bean id="forumServiceTarget" class="store.guojun.aop.NaiveWaiter"></bean>
	<bean id="formService" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interfaces="store.guojun.aop.Monitorable"
		  p:target-ref="forumServiceTarget"
		  p:interceptorNames="pmonitor"
		  p:proxyTargetClass="true"
	>
	</bean>
	<!-- proxyTargetClass等于true,使用cglib代理-->

	<!-- 静态切面 -->
	<bean id="sellerTarget" class="store.guojun.aop.Seller"></bean>
	<bean id="waiterTarget" class="store.guojun.aop.staticadvisor.StaticWaiter"></bean>
	<!-- 向切面注入一个前置增强 -->
	<bean id="staticGreetingAdvisor" class="store.guojun.aop.staticadvisor.GreetingAdvisor"
		  p:advice-ref="greetAdvice"
	></bean>
	<!-- 通过一个父bean,定义公共的配置信息
	 interceptorNames 指定代理的接口,如果是多个接口,使用<list> 元素,即代理需要实现的接口
	 -->
	<bean id="parent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="staticGreetingAdvisor"
		p:proxyTargetClass="true"
	></bean>
	<bean id="seller" parent="parent" p:target-ref="sellerTarget"></bean>
	<bean id="waiter" parent="parent" p:target-ref="waiterTarget"></bean>

	<!-- 静态正则表达式匹配 -->
	<bean id="regexpAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"
		p:advice-ref="greetAdvice">
		<!-- 用正则表达式定义目标类全限定方法名的匹配模式串 -->
		<property name="patterns">
			<list>
				<!-- 匹配模式串 -->
				<value>.*greet.*</value>
			</list>
		</property>
	</bean>

	<bean id="regexpWaiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="regexpAdvisor"
	    p:target-ref="waiterTarget"
	    p:proxyTargetClass="true"
	></bean>

	<!-- 动态切面 -->
	<bean id="dynamicAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut">
			<bean class="store.guojun.aop.dynamicadvisor.GreetingDynamicPointcut"></bean>
		</property>
		<property name="advice">
			<bean class="store.guojun.aop.GreetingBeforeAdvice"></bean>
		</property>
	</bean>
	<bean id="dynamicWaiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:target-ref="waiterTarget"
		  p:interceptorNames="dynamicAdvisor"
		  p:proxyTargetClass="true"
	></bean>
</beans>









































